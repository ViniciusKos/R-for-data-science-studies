library(tidyverse)
library(tidymodels)
library(nycflights13)
tidymodels_prefer()
set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata =
Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
simple_ames <-
recipe(Sale_Price ~
Neighborhood +
Gr_Liv_Area +
Year_Built +
Bldg_Type,
data = ames_train) |>
step_log(Gr_Liv_Area, base = 10) |>
step_dummy(all_nominal_predictors())
ames <- mutate(ames, Sale_Price = log10(Sale_Price))
set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata =
Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
lm_model <- linear_reg() %>% set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_variables(outcome = Sale_Price, predictors = c(Longitude,
Latitude))
lm_fit <- fit(lm_wflow, ames_train)
lm_wflow |>
add_recipe(simple_ames)
lm_wflow <- lm_wflow |>
remove_variables() |>
add_recipe(simple_ames)
lm_wflow
lm_fit <- fit(lm_wflow, ames_train)
predict(lm_fit, ames_test |> slice(1:3))
lm_fit |>
extract_recipe(estimated = TRUE)
lm_fit |>
extract_fit_parsnip() |>
tidy() |>
slice(1:5)
simple_ames <-
recipe(Sale_Price ~ Gr_Liv_Area + Year_Built +
Bldg_Type,
data = ames_train) |>
step_log(Gr_Liv_Area, base = 10) |>
# step_other(Neighborhood, threshold = 0.01) |>
step_dummy(all_nominal_predictors()) |>
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_"))
aux0 = simple_ames |> prep() |> bake(new_data = NULL,
composition = "tibble")
head(aux0)
head(ames)
library(patchwork)
library(splines)
plot_smoother <- function(deg_free) {
ggplot(ames_train, aes(x = Latitude, y = 10^Sale_Price)) +
geom_point(alpha = .2) +
scale_y_log10() +
geom_smooth(
method = lm,
formula = y ~ ns(x, df = deg_free),
color = "lightblue",
se = FALSE
) +
labs(title = paste(deg_free, "Spline Terms"),
y = "Sale Price (USD)")
}
( plot_smoother(2) + plot_smoother(5) ) / ( plot_smoother(20) +
plot_smoother(100) )
simple_ames <-
recipe(Sale_Price ~ .,
data = ames_train) |>
step_log(Gr_Liv_Area, base = 10) |>
# step_other(Neighborhood, threshold = 0.01) |>
step_dummy(all_nominal_predictors()) |>
step_pca(matches("(SF$)|(Gr_Liv)"), skip = TRUE)
ames_rec <-
recipe(Sale_Price ~ Neighborhood +
Gr_Liv_Area +
Year_Built +
Bldg_Type +
Latitude +
Longitude,
data = ames_train) |>
step_log(Gr_Liv_Area, base = 10) |>
step_other(Neighborhood, threshold = 0.01, id = "ot") |>
step_dummy(all_nominal_predictors()) |>
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_")) |>
step_ns(Latitude, Longitude, deg_free = 20)
tidy(ames_rec)
lm_wflow <-
workflow() |>
add_model(lm_model) |>
add_recipe(ames_rec)
lm_fit <- fit(lm_wflow, ames_train)
estimated_recipe <-
lm_fit |>
extract_recipe(estimated = TRUE)
tidy(ames_rec, 2)
ames_rec |>
add_role(Latitude, new_role = "predictor")
ames_test_res <- predict(lm.fit, new_data = ames_test |> select(-Sale_Price))
ames_test_res <- predict(lm_fit, new_data = ames_test |> select(-Sale_Price))
ames_test_res
ames_test_res <- bind_cols(ames_test_res,
ames_test |> select(Sale_Price))
head(ames_test_res)
ggplot(ames_test_res, aes(x = Sale_Price), y = .pred)) +
ggplot(ames_test_res, aes(x = Sale_Price), y = .pred)) +
ggplot(ames_test_res, aes(x = Sale_Price), y = .pred)) + geom_abline(lty = 2) +
ggplot(ames_test_res,
aes(x = Sale_Price, y = .pred)) + geom_abline(lty = 2) +
geom_point(alpha = 0.5) +
labs(y = "Predicted Sale Price (log10)", x = "Sale Price
(log10)") +
coord_obs_pred()
rmse(ames_test_res,
truth = Sale_Price,
estimate = .pred)
ames_metrics <- metric_set(rmse, rsq, mae)
ames_metrics(ames_test_res,
Sale_Price,
.pred)
data(two_class_example)
tibble(two_class_example)
classification_metrics <- metric_set(accuracy, mcc, f_meas)
classification_metrics(two_class_example, truth = truth, estimate = predicted)
two_class_curve <- roc_curve(two_class_example,
truth,
Class1)
two_class_curve
roc_auc(two_class_example, truth, Class1)
autoplot(two_class_curve)
gain_curve(two_class_example, truth, Class1) |>
autoplot()
lift_curve(two_class_example, truth, Class1) |>
autoplot()
pr_curve(two_class_example, truth, Class1) |>
autoplot()
data(hpc_cv)
tibble(hpc_cv)
multiclass_metrics <- metric_set(
sensitivity(estimator = "macro"),
sensitivity(estimator = "macro_weighted"),
sensitivity(estimator = "micro"))
roc_auc(hpc_cv, obs, VF, F, M, L, estimator = "macro_weighted")
hpc_cv |>
group_by(Resample) |>
accuracy(obs, pred)
hpc_cv |>
group_by(Resample) |>
roc_curve(obs, VF, F, M, L) |>
autoplot() +
theme(legend.position = "none")
