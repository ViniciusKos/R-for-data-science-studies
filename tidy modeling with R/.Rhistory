step_log(Gr_Liv_Area, base = 10) %>%
step_dummy(all_nominal_predictors())
lm_model <- linear_reg() %>% set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_variables(outcome = Sale_Price, predictors = c(Longitude,
Latitude))
lm_wflow <-
lm_wflow %>%
remove_variables() %>%
add_recipe(simple_ames)
lm_wflow
lm_fit <- fit(lm_wflow, ames_train)
#> ══ Workflow
estimate_perf(lm_fit, ames_train)
estimate_perf(rf_fit, ames_train)
estimate_perf(rf_fit, ames_test)
estimate_perf(lm_fit, ames_test)
set.seed(1001)
ames_folds <- vfold_cv(ames_train, v = 10)
ames_folds
ames_folds$splits[[1]] |> analysis() |> dim()
vfold_cv(ames_train, v = 10, repeats= 5)
mc_cv(ames_train,
prop = 9/10,
times = 20)
mc_cv(ames_train,
prop = 9/10,
times = 20)$splits
mc_cv(ames_train,
prop = 9/10,
times = 20)
mc_cv(ames_train,
times = 20)
mc_cv(ames_train,
times = 20)$splits
mc_cv(ames_train,
times = 20)
set.seed(1002)
val_set <- validation_split(ames_train, prop = 3/4)
set.seed(1002)
val_set <- validation_split(ames_train, prop = 3/4)
val_set
bootstraps(ames_train, times = 5)
time_slices <-
tibble(x = 1:365) |>
rolling_origin(initial = 6 * 3,
assess = 30,
skip = 29,
cumulative = FALSE)
data_range <- function(x) {
summarize(x,
first = min(x),
last = max(x))
}
map_dr(time_slices$splits, ~ analysis(.x) |> data_range())
time_slices <-
tibble(x = 1:365) |>
rolling_origin(initial = 6 * 3,
assess = 30,
skip = 29,
cumulative = FALSE)
data_range <- function(x) {
summarize(x,
first = min(x),
last = max(x))
}
map_dfr(time_slices$splits, ~ analysis(.x) |> data_range())
time_slices <-
tibble(x = 1:365) |>
rolling_origin(initial = 6 * 3,
assess = 30,
skip = 29,
cumulative = FALSE)
head(time_slices)
data_range <- function(x) {
summarize(x,
first = min(x),
last = max(x))
}
data_range
map_dfr(time_slices$splits, ~ analysis(.x) |> data_range())
rf_wflow |> fit_resamples(val_set)
keep_pred <- control_resamples(
save_pred = TRUE,
save_workflow = TRUE)
set.seed(1003)
rf_res <-
rf_wflow |>
fit_resamples(
resamples = ames_folds,
control = keep_pred
)
rf_res
rf_res$metrics
rf_res$.metrics
rf_res |> unnest(.metrics)
View(rf_res)
View(rf_res)
rf_res |> head()
rf_res$.metrics |> head()
rf_res |> unnest(.metrics) |> unnest(.notes)
rf_res |> unnest(.metrics)
rf_res |> unnest(.metrics) |> unnest(.notes)
aux0 <- rf_res |> unnest(.metrics)
aux0 |> unnest(.notes)
aux0 <- rf_res |> unnest(.metrics)
aux0 |> unnest(.predictions)
aux0 <- rf_res |> unnest(.metrics)
head(aux0)
collect_metrics(rf_res)
collect_metrics(rf_res,
summarize = FALSE)
assess_res <- collect_prediction(rf_res)
assess_res <- collect_predictions(rf_res)
assess_res
assess_res |>
ggplot(aes(x = Sale_Price, y = .pred)) +
geom_point(alpha = .15) +
geom_abline(color = "red") +
coord_obs_pred() +
ylab("Predicted")
over_predicted <-
assess_res |>
mutate(residual = Sale_Price - .pred) |>
arrange(desc(abs(residual))) |>
slice(1:2)
ames_train |>
slice(over_predicted$.row) |>
select(Gr_Liv_Area,
Neighborhood,
Year_Built,
Bedroom_AbvGr,
Full_Bath)
val_res <- rf_wflow |>
fit_resamples(resamples = val_set)
val_res
collect_metrics(val_res)
parallel::detectCores(logical = FALSE)
parallel:detectCores(logical = TRUE)
parallel::detectCores(logical = TRUE)
ames_rec <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built +
Bldg_Type +
Latitude + Longitude, data = ames_train) %>%
step_other(Neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>%
step_ns(Latitude, Longitude, deg_free = 20)
lm_wflow <-
workflow() %>%
add_recipe(ames_rec) %>%
add_model(linear_reg() %>% set_engine("lm"))
lm_fit <- lm_wflow |>
fit(data = ames_train)
extract_recipe(lm_fit, estimated = TRUE)
get_model <- function(x) {
extract_fit_parsnip(x) |> tidy()
}
get_model(lm_fit)
ctrl <-  control_resamples(extract = get_model)
lm_res <- lm_wflow |>
fit_resamples(resamples = ames_folds,
control = ctrl)
lm_res
lm_res$.extracts
lm_res$.extracts[1]
lm_res$.extracts[[1]]
lm_res$.extracts[[1]][[1]]
lm_res$.extracts[[1]][1]
lm_res$.extracts[[1]]
lm_res$.extracts[[1]][1]
lm_res$.extracts[[1]][[1]]
all_coef <- map(lm_res$.extracts, ~ .x[[1]][[1]])
all_coef <- map(lm_res$.extracts, ~ .x[[1]][[1]])
all_coef
all_coef <- map(lm_res$.extracts, ~ .x[[1]][[1]])
all_coef |> filter( term == "Year_Built")
all_coef <- map(lm_res$.extracts, ~ .x[[1]][[1]])
print(class(all_coef))
all_coef |> filter( term == "Year_Built")
all_coef <- map(lm_res$.extracts, ~ .x[[1]][[1]])
all_coef
library(tidymodels)
data(ames)
ames <- mutate(ames, Sale_Price = log10(Sale_Price))
set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata =
Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
ames_rec <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built +
Bldg_Type +
Latitude + Longitude, data = ames_train) %>%
step_log(Gr_Liv_Area, base = 10) %>%
step_other(Neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>%
step_ns(Latitude, Longitude, deg_free = 20)
lm_model <- linear_reg() %>% set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_recipe(ames_rec)
lm_fit <- fit(lm_wflow, ames_train)
rf_model <-
rand_forest(trees = 1000) %>%
library(tidymodels)
data(ames)
ames <- mutate(ames, Sale_Price = log10(Sale_Price))
set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata =
Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
ames_rec <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built +
Bldg_Type +
Latitude + Longitude, data = ames_train) %>%
step_log(Gr_Liv_Area, base = 10) %>%
step_other(Neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>%
step_ns(Latitude, Longitude, deg_free = 20)
lm_model <- linear_reg() %>% set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_recipe(ames_rec)
lm_fit <- fit(lm_wflow, ames_train)
rf_model <-
rand_forest(trees = 1000) %>%
set_engine("ranger") %>%
set_mode("regression")
rf_wflow <-
workflow() %>%
add_formula(
Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built +
Bldg_Type +
Latitude + Longitude) %>%
add_model(rf_model)
set.seed(1001)
ames_folds <- vfold_cv(ames_train, v = 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow =
TRUE)
set.seed(1003)
rf_res <- rf_wflow %>% fit_resamples(resamples = ames_folds,
control = keep_pred)
library(tidyverse)
library(tidymodels)
library(nycflights13)
tidymodels_prefer()
options(scipen=999)
set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata =
Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
simple_ames <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built +
Bldg_Type,
data = ames_train) %>%
step_log(Gr_Liv_Area, base = 10) %>%
step_dummy(all_nominal_predictors())
lm_model <- linear_reg() %>% set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_variables(outcome = Sale_Price, predictors = c(Longitude,
Latitude))
lm_wflow <-
lm_wflow %>%
remove_variables() %>%
add_recipe(simple_ames)
lm_wflow
lm_fit <- fit(lm_wflow, ames_train)
#> ══ Workflow
rf_model <-
rand_forest(trees = 1000) |>
set_engine("ranger") |>
set_mode("regression")
rf_wflow <-
workflow() |>
add_formula(
Sale_Price ~
Neighborhood +
Gr_Liv_Area +
Year_Built +
Bldg_Type +
Latitude +
Longitude) |>
add_model(rf_model)
rf_fit <- rf_wflow |>
fit(data = ames_train)
estimate_perf <- function(model, dat) {
# Capture the names of the `model` and `dat` objects
cl <- match.call()
obj_name <- as.character(cl$model)
data_name <- as.character(cl$dat)
data_name <- gsub("ames_", "", data_name)
reg_metrics <- metric_set(rmse, rsq)
model %>%
predict(dat) %>%
bind_cols(dat %>% select(Sale_Price)) %>%
reg_metrics(Sale_Price, .pred) %>%
select(-.estimator) %>%
mutate(object = obj_name, data = data_name)
}
estimate_perf(lm_fit, ames_train)
estimate_perf(rf_fit, ames_train)
estimate_perf(rf_fit, ames_test)
estimate_perf(lm_fit, ames_test)
set.seed(1001)
ames_folds <- vfold_cv(ames_train, v = 10)
ames_folds
ames_folds$splits[[1]] |> analysis() |> dim()
erro_padrão = desvio_padrao/raizquadrada(N)
mc_cv(ames_train,
times = 20)
set.seed(1002)
val_set <- validation_split(ames_train, prop = 3/4)
val_set
bootstraps(ames_train, times = 5)
time_slices <-
tibble(x = 1:365) |>
rolling_origin(initial = 6 * 3,
assess = 30,
skip = 29,
cumulative = FALSE)
head(time_slices)
data_range <- function(x) {
summarize(x,
first = min(x),
last = max(x))
}
data_range
map_dfr(time_slices$splits, ~ analysis(.x) |> data_range())
rf_wflow |> fit_resamples(val_set)
keep_pred <- control_resamples(
save_pred = TRUE,
save_workflow = TRUE)
set.seed(1003)
rf_res <-
rf_wflow |>
fit_resamples(
resamples = ames_folds,
control = keep_pred
)
rf_res
collect_metrics(rf_res,
summarize = FALSE)
assess_res <- collect_predictions(rf_res)
assess_res
assess_res |>
ggplot(aes(x = Sale_Price, y = .pred)) +
geom_point(alpha = .15) +
geom_abline(color = "red") +
coord_obs_pred() +
ylab("Predicted")
over_predicted <-
assess_res |>
mutate(residual = Sale_Price - .pred) |>
arrange(desc(abs(residual))) |>
slice(1:2)
ames_train |>
slice(over_predicted$.row) |>
select(Gr_Liv_Area,
Neighborhood,
Year_Built,
Bedroom_AbvGr,
Full_Bath)
val_res <- rf_wflow |>
fit_resamples(resamples = val_set)
val_res
collect_metrics(val_res)
parallel::detectCores(logical = FALSE)
parallel::detectCores(logical = TRUE)
ames_rec <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built +
Bldg_Type +
Latitude + Longitude, data = ames_train) %>%
step_other(Neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>%
step_ns(Latitude, Longitude, deg_free = 20)
lm_wflow <-
workflow() %>%
add_recipe(ames_rec) %>%
add_model(linear_reg() %>% set_engine("lm"))
lm_fit <- lm_wflow |>
fit(data = ames_train)
extract_recipe(lm_fit, estimated = TRUE)
get_model <- function(x) {
extract_fit_parsnip(x) |> tidy()
}
get_model(lm_fit)
ctrl <-  control_resamples(extract = get_model)
lm_res <- lm_wflow |>
fit_resamples(resamples = ames_folds,
control = ctrl)
lm_res
lm_res$.extracts[[1]]
lm_res$.extracts[[1]][[1]]
all_coef <- map(lm_res$.extracts, ~ .x[[1]][[1]])
all_coef
library(tidymodels)
data(ames)
ames <- mutate(ames, Sale_Price = log10(Sale_Price))
set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata =
Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
ames_rec <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built +
Bldg_Type +
Latitude + Longitude, data = ames_train) %>%
step_log(Gr_Liv_Area, base = 10) %>%
step_other(Neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") ) %>%
step_ns(Latitude, Longitude, deg_free = 20)
lm_model <- linear_reg() %>% set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_recipe(ames_rec)
lm_fit <- fit(lm_wflow, ames_train)
rf_model <-
rand_forest(trees = 1000) %>%
set_engine("ranger") %>%
set_mode("regression")
rf_wflow <-
workflow() %>%
add_formula(
Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built +
Bldg_Type +
Latitude + Longitude) %>%
add_model(rf_model)
set.seed(1001)
ames_folds <- vfold_cv(ames_train, v = 10)
keep_pred <- control_resamples(save_pred = TRUE, save_workflow =
TRUE)
set.seed(1003)
rf_res <- rf_wflow %>% fit_resamples(resamples = ames_folds,
control = keep_pred)
library(tidymodels)
tidymodels_prefer()
basic_rec <-
recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type +
Latitude + Longitude, data = ames_train) %>%
step_log(Gr_Liv_Area, base = 10) %>%
step_other(Neighborhood, threshold = 0.01) %>%
step_dummy(all_nominal_predictors())
interaction_rec <-
basic_rec %>%
step_interact( ~ Gr_Liv_Area:starts_with("Bldg_Type_") )
spline_rec <-
interaction_rec %>%
step_ns(Latitude, Longitude, deg_free = 50)
preproc <-
list(basic = basic_rec,
interact = interaction_rec,
splines = spline_rec)
lm_models <- workflow_set(preproc, list(lm = linear_reg()), cross = FALSE)
lm_models
lm_models <-
lm_models |>
workflow_map("fit_resamples",
seed = 123, verbose = TRUE,
resamples = ames_folds, control = keep_pred)
lm_models
collect_metrics(lm_models) |>
filter(.metric == "rmse")
four_models <-
as_workflow_set(random_forest = rf_res) |>
bind_rows(lm_models)
four_models
library(ggrepel)
autoplot(
four_models,
metric = "rsq") +
geom_text_repel(aes(label = wflow_id),
nudge_x = 1/8,
nudge_y = 1/100) +
theme(legend.position = "none")
rsq_indiv_estimates <-
collect_metrics(four_models, summarize = FALSE) |>
filter(.metric == "rsq")
rsq_wider <-
rsq_indiv_estimates |>
select(wflow_id, .estimate, id) |>
pivot_wider(id_cols = "id", names_from = "wflow_id", values_from = ".estimate")
rsq_indiv_estimates <-
collect_metrics(four_models, summarize = FALSE) |>
filter(.metric == "rsq")
rsq_wider <-
rsq_indiv_estimates |>
select(wflow_id, .estimate, id) |>
pivot_wider(id_cols = "id", names_from = "wflow_id", values_from = ".estimate")
corrr::correlate(rsq_wider %>% select(-id), quiet = TRUE)
install.packages("corrr")
rsq_indiv_estimates <-
collect_metrics(four_models, summarize = FALSE) |>
filter(.metric == "rsq")
rsq_wider <-
rsq_indiv_estimates |>
select(wflow_id, .estimate, id) |>
pivot_wider(id_cols = "id", names_from = "wflow_id", values_from = ".estimate")
corrr::correlate(rsq_wider %>% select(-id), quiet = TRUE)
